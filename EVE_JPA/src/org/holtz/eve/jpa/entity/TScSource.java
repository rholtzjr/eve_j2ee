package org.holtz.eve.jpa.entity;
// Generated Aug 4, 2017 9:16:24 AM by Hibernate Tools 4.0.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * TScSource generated by hbm2java
 */
@Entity
@Table(name = "T_ScSource", uniqueConstraints = @UniqueConstraint(columnNames = "ScSourceTx"))
public class TScSource implements java.io.Serializable {

	private int scSourceId;
	private String scSourceTx;
	private boolean scUnavailableBl;
	private Date scLastUpdatedDate;
	private boolean scRequiredBl;
	private Date scCreationDate;
	private Set<TCuCust> TCuCusts = new HashSet<TCuCust>(0);
	private Set<TInInvoice> TInInvoices = new HashSet<TInInvoice>(0);
	private Set<TSoStore> TSoStores = new HashSet<TSoStore>(0);

	public TScSource() {
	}

	public TScSource(int scSourceId, String scSourceTx, boolean scUnavailableBl, Date scLastUpdatedDate,
			boolean scRequiredBl, Date scCreationDate) {
		this.scSourceId = scSourceId;
		this.scSourceTx = scSourceTx;
		this.scUnavailableBl = scUnavailableBl;
		this.scLastUpdatedDate = scLastUpdatedDate;
		this.scRequiredBl = scRequiredBl;
		this.scCreationDate = scCreationDate;
	}

	public TScSource(int scSourceId, String scSourceTx, boolean scUnavailableBl, Date scLastUpdatedDate,
			boolean scRequiredBl, Date scCreationDate, Set<TCuCust> TCuCusts, Set<TInInvoice> TInInvoices,
			Set<TSoStore> TSoStores) {
		this.scSourceId = scSourceId;
		this.scSourceTx = scSourceTx;
		this.scUnavailableBl = scUnavailableBl;
		this.scLastUpdatedDate = scLastUpdatedDate;
		this.scRequiredBl = scRequiredBl;
		this.scCreationDate = scCreationDate;
		this.TCuCusts = TCuCusts;
		this.TInInvoices = TInInvoices;
		this.TSoStores = TSoStores;
	}

	@Id

	@Column(name = "ScSourceID", unique = true, nullable = false)
	public int getScSourceId() {
		return this.scSourceId;
	}

	public void setScSourceId(int scSourceId) {
		this.scSourceId = scSourceId;
	}

	@Column(name = "ScSourceTx", unique = true, nullable = false)
	public String getScSourceTx() {
		return this.scSourceTx;
	}

	public void setScSourceTx(String scSourceTx) {
		this.scSourceTx = scSourceTx;
	}

	@Column(name = "ScUnavailableBl", nullable = false)
	public boolean isScUnavailableBl() {
		return this.scUnavailableBl;
	}

	public void setScUnavailableBl(boolean scUnavailableBl) {
		this.scUnavailableBl = scUnavailableBl;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ScLastUpdatedDate", nullable = false, length = 23)
	public Date getScLastUpdatedDate() {
		return this.scLastUpdatedDate;
	}

	public void setScLastUpdatedDate(Date scLastUpdatedDate) {
		this.scLastUpdatedDate = scLastUpdatedDate;
	}

	@Column(name = "ScRequiredBl", nullable = false)
	public boolean isScRequiredBl() {
		return this.scRequiredBl;
	}

	public void setScRequiredBl(boolean scRequiredBl) {
		this.scRequiredBl = scRequiredBl;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ScCreationDate", nullable = false, length = 23)
	public Date getScCreationDate() {
		return this.scCreationDate;
	}

	public void setScCreationDate(Date scCreationDate) {
		this.scCreationDate = scCreationDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "TScSource")
	public Set<TCuCust> getTCuCusts() {
		return this.TCuCusts;
	}

	public void setTCuCusts(Set<TCuCust> TCuCusts) {
		this.TCuCusts = TCuCusts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "TScSource")
	public Set<TInInvoice> getTInInvoices() {
		return this.TInInvoices;
	}

	public void setTInInvoices(Set<TInInvoice> TInInvoices) {
		this.TInInvoices = TInInvoices;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "T_ZjStoreSource", joinColumns = {
			@JoinColumn(name = "ZjSourceID", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "ZjStoreID", nullable = false, updatable = false) })
	public Set<TSoStore> getTSoStores() {
		return this.TSoStores;
	}

	public void setTSoStores(Set<TSoStore> TSoStores) {
		this.TSoStores = TSoStores;
	}

}
